# ============================================================================
# üöÄ Nix Flake Updater Workflow
#
# This workflow keeps your Nix flake.lock up to date, opens a PR, runs checks,
# and auto-merges when green. 
#
# REQUIRED REPO SETTINGS:
#   1. Settings ‚Üí Actions ‚Üí General ‚Üí Workflow permissions:
#      "Allow GitHub Actions to create and approve pull requests" ‚úÖ
#   2. Settings ‚Üí General ‚Üí Pull Requests:
#      "Allow auto-merge" ‚úÖ
#   3. Optional: Create secret GH_TOKEN_FOR_UPDATES with a PAT for better CI
#
# Troubleshooting:
#   - If you get "not permitted to create pull requests", enable setting #1 above
#   - If auto-merge fails, check repo settings above and token permissions
#   - For best results, enable Dependabot for GitHub Actions updates
# ============================================================================

name: "Update Nix flake.lock"

on:
  schedule:
    # Twice weekly: Mondays & Thursdays at 06:00 UTC
    - cron: '0 6 * * 1,4'
  workflow_dispatch:
    inputs:
      test-mode:
        description: 'Test mode (creates PR but skips auto-merge)'
        required: false
        default: false
        type: boolean

concurrency:
  group: update-flake-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read # Default, jobs override as needed
  id-token: write # Required for Determinate Nix OIDC
  pull-requests: write # Required for creating PRs
  issues: write # Required for PR assignments

jobs:
  update-flake-lock:
    name: "Update flake.lock"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    env:
      NIX_CONFIG: "experimental-features = nix-command flakes"
      # Uncomment if you use unfree packages:
      NIXPKGS_ALLOW_UNFREE: 1
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Install Nix (flakes enabled)"
        # Pinned to major; Dependabot keeps this fresh
        uses: DeterminateSystems/determinate-nix-action@v3
        with:
          extra-conf: |
            experimental-features = nix-command flakes

      - name: "Enable Magic Nix Cache"
        # Pinned to major; Dependabot keeps this fresh
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: "Update flake.lock and open PR"
        # Pinned to major; Dependabot keeps this fresh
        uses: DeterminateSystems/update-flake-lock@v21
        with:
          pr-title: "üì¶ nix flake.lock: update dependencies"
          pr-labels: "dependencies, nix, automated, üì¶ dependencies"
          pr-assignees: "kmdtaufik"
          pr-body: |
            ## :rocket: Automated Nix flake.lock update
            
            This PR updates `flake.lock` to the latest versions.
            
            **Changelog:**
            ```
            {{#if commitRange}}
            Updated inputs:
            {{#each commitRange}}
            - {{this}}
            {{/each}}
            {{else}}
            (No input changes detected)
            {{/if}}
            ```
            
            **How to rerun:**
            > Re-run this workflow via GitHub Actions ‚Üí "Update Nix flake.lock"
            
            ---
            _Automated PR by [update-flake-lock](https://github.com/DeterminateSystems/update-flake-lock)_
            
            ${{ github.event.inputs.test-mode == 'true' && 'üß™ **TEST MODE**: Auto-merge disabled for testing' || '' }}
          token: ${{ secrets.GH_TOKEN_FOR_UPDATES || github.token }}
          # path-to-flake-dir: "." # Uncomment and set if your flake is not at repo root
        timeout-minutes: 10

  validate-update:
    name: "Validate flake update"
    runs-on: ubuntu-latest
    needs: update-flake-lock
    if: ${{ needs.update-flake-lock.outputs.pull-request-number }}
    permissions:
      contents: read
      id-token: write
    env:
      NIX_CONFIG: "experimental-features = nix-command flakes"
      # Uncomment if you use unfree packages:
      NIXPKGS_ALLOW_UNFREE: 1
    steps:
      - name: "Checkout PR branch"
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ needs.update-flake-lock.outputs.pull-request-number }}/head

      - name: "Install Nix (flakes enabled)"
        uses: DeterminateSystems/determinate-nix-action@v3
        with:
          extra-conf: |
            experimental-features = nix-command flakes

      - name: "Enable Magic Nix Cache"
        uses: DeterminateSystems/magic-nix-cache-action@v2

      - name: "Run nix flake check"
        run: |
          nix flake check --print-build-logs
        timeout-minutes: 20

      - name: "Build default package (if present)"
        run: |
          nix build .#packages.x86_64-linux.default || echo "No default package to build."
        timeout-minutes: 20

  auto-merge:
    name: "Auto-merge flake update PR"
    runs-on: ubuntu-latest
    needs: [update-flake-lock, validate-update]
    if: ${{ needs.update-flake-lock.outputs.pull-request-number && github.event.inputs.test-mode != 'true' }}
    permissions:
      contents: write
      pull-requests: write
      id-token: write
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Enable auto-merge if possible"
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_FOR_UPDATES || github.token }}
          PR_NUMBER: ${{ needs.update-flake-lock.outputs.pull-request-number }}
        run: |
          set -e
          # Check if PR is from update-flake-lock bot branch
          PR_BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q .headRefName)
          if [[ "$PR_BRANCH" == update-flake-lock* ]]; then
            echo "üöÄ Enabling auto-merge for PR #$PR_NUMBER..."
            gh pr merge "$PR_NUMBER" --auto --squash --delete-branch || {
              echo "‚ö†Ô∏è Auto-merge failed. Adding comment to PR..."
              gh pr comment "$PR_NUMBER" --body "‚ö†Ô∏è **Auto-merge could not be enabled**

              Please check the following repository settings:
              1. **Settings ‚Üí General ‚Üí Pull Requests**: \"Allow auto-merge\" must be enabled
              2. **Settings ‚Üí Actions ‚Üí General**: \"Allow GitHub Actions to create and approve pull requests\" must be enabled
              3. If using a custom token, ensure it has sufficient permissions

              You can manually merge this PR once checks pass, or re-run the workflow after fixing settings."
              exit 1
            }
            echo "‚úÖ Auto-merge enabled successfully!"
          else
            echo "‚ùå Not an update-flake-lock PR (branch: $PR_BRANCH); skipping auto-merge."
          fi
        timeout-minutes: 5

  # Test mode summary job
  test-summary:
    name: "Test Mode Summary"
    runs-on: ubuntu-latest
    needs: [update-flake-lock, validate-update]
    if: ${{ github.event.inputs.test-mode == 'true' && needs.update-flake-lock.outputs.pull-request-number }}
    steps:
      - name: "Test mode completion"
        run: |
          echo "üß™ **TEST MODE COMPLETE**"
          echo ""
          echo "‚úÖ Flake update PR created: #${{ needs.update-flake-lock.outputs.pull-request-number }}"
          echo "‚úÖ Validation checks passed"
          echo "‚è∏Ô∏è Auto-merge skipped (test mode)"
          echo ""
          echo "To enable auto-merge, re-run without test mode enabled."

# ============================================================================
# Security & Hygiene:
#   - All third-party actions pinned to major; use Dependabot for updates.
#   - Minimal permissions per job.
#   - Flakes always enabled via NIX_CONFIG.
#   - Timeouts set for long steps.
#
# For more info, see:
#   - https://github.com/DeterminateSystems/determinate-nix-action
#   - https://github.com/DeterminateSystems/magic-nix-cache-action
#   - https://github.com/DeterminateSystems/update-flake-lock
# ============================================================================
